// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "jwtly10/Jambda",
            "url": "https://www.github.com/jwtly10/jambda"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/file/upload": {
            "post": {
                "description": "Uploads a zip file, validates its contents, and processes it in storage. The zip file must contain a \"bootstrap\" executable. Returns ExternalId",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Upload and process a file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "File to upload",
                        "name": "upload",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "File uploaded and processed successfully",
                        "schema": {
                            "$ref": "#/definitions/data.FunctionEntity"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/function/{id}/": {
            "post": {
                "description": "Proxies requests to docker instance running executable. Middleware figures out the instance URL to proxy the request to. Returns proxied response.",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "functions"
                ],
                "summary": "Make request to a REST function",
                "parameters": [
                    {
                        "type": "string",
                        "description": "External ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully proxied and processed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "data.FunctionConfig": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "env_vars": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "trigger": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "data.FunctionEntity": {
            "type": "object",
            "properties": {
                "configuration": {
                    "$ref": "#/definitions/data.FunctionConfig"
                },
                "created_at": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "localhost:8080",
	BasePath:         "/v1/api",
	Schemes:          []string{},
	Title:            "Jambda - Serverless framework",
	Description:      "A WIP serverless framework for running functions similar to AWS Lambda",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
