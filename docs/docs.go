// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "jwtly10/Jambda",
            "url": "https://www.github.com/jwtly10/jambda"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/execute/{id}/": {
            "get": {
                "description": "Proxies requests to docker instance running executable. Method passed to instance forwarded from req. Middleware figures out the instance URL to proxy the request to, based on ExternalId. Returns proxied response.",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Executions"
                ],
                "summary": "Make request to a REST function",
                "parameters": [
                    {
                        "type": "string",
                        "description": "External ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully proxied and processed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Proxies requests to docker instance running executable. Method passed to instance forwarded from req. Middleware figures out the instance URL to proxy the request to, based on ExternalId. Returns proxied response.",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Executions"
                ],
                "summary": "Make request to a REST function",
                "parameters": [
                    {
                        "type": "string",
                        "description": "External ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully proxied and processed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Proxies requests to docker instance running executable. Method passed to instance forwarded from req. Middleware figures out the instance URL to proxy the request to, based on ExternalId. Returns proxied response.",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Executions"
                ],
                "summary": "Make request to a REST function",
                "parameters": [
                    {
                        "type": "string",
                        "description": "External ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully proxied and processed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Proxies requests to docker instance running executable. Method passed to instance forwarded from req. Middleware figures out the instance URL to proxy the request to, based on ExternalId. Returns proxied response.",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Executions"
                ],
                "summary": "Make request to a REST function",
                "parameters": [
                    {
                        "type": "string",
                        "description": "External ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully proxied and processed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/function": {
            "get": {
                "description": "Retrieves a list of all function entities stored in the system.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Functions"
                ],
                "summary": "List all functions",
                "responses": {
                    "200": {
                        "description": "List of all functions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/data.FunctionEntity"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Uploads a zip file, validates its contents, and processes it in storage. The zip file must contain a \"bootstrap\" executable. Returns ExternalId",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Functions"
                ],
                "summary": "Upload and process a file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "File to upload",
                        "name": "upload",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JSON configuration data",
                        "name": "config",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "File uploaded and processed successfully",
                        "schema": {
                            "$ref": "#/definitions/data.FunctionEntity"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/function/{id}": {
            "put": {
                "description": "Updates an existing function config by submitting new config data",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Functions"
                ],
                "summary": "Update an existing function config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Function ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JSON configuration data",
                        "name": "config",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Function updated successfully",
                        "schema": {
                            "$ref": "#/definitions/data.FunctionEntity"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID or data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found: Function not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a specific function entity identified by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Functions"
                ],
                "summary": "Delete a function",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Function ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Function deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found: Function not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "data.FunctionConfig": {
            "type": "object",
            "properties": {
                "env_vars": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "trigger": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "data.FunctionEntity": {
            "type": "object",
            "properties": {
                "configuration": {
                    "$ref": "#/definitions/data.FunctionConfig"
                },
                "created_at": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "localhost:8080",
	BasePath:         "/v1/api",
	Schemes:          []string{},
	Title:            "Jambda - Serverless framework",
	Description:      "A WIP serverless framework for running functions similar to AWS Lambda",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
