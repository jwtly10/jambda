basePath: /v1/api
definitions:
  data.FunctionConfig:
    properties:
      env_vars:
        additionalProperties:
          type: string
        type: object
      image:
        type: string
      port:
        type: integer
      trigger:
        type: string
      type:
        type: string
    type: object
  data.FunctionEntity:
    properties:
      configuration:
        $ref: '#/definitions/data.FunctionConfig'
      created_at:
        type: string
      external_id:
        type: string
      id:
        type: integer
      name:
        type: string
      state:
        type: string
      updated_at:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: jwtly10/Jambda
    url: https://www.github.com/jwtly10/jambda
  description: A WIP serverless framework for running functions similar to AWS Lambda
  title: Jambda - Serverless framework
  version: "0.1"
paths:
  /execute/{id}/:
    delete:
      consumes:
      - text/plain
      description: Proxies requests to docker instance running executable. Method
        passed to instance forwarded from req. Middleware figures out the instance
        URL to proxy the request to, based on ExternalId. Returns proxied response.
      parameters:
      - description: External ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - '*/*'
      responses:
        "200":
          description: Request successfully proxied and processed
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Make request to a REST function
      tags:
      - Executions
    get:
      consumes:
      - text/plain
      description: Proxies requests to docker instance running executable. Method
        passed to instance forwarded from req. Middleware figures out the instance
        URL to proxy the request to, based on ExternalId. Returns proxied response.
      parameters:
      - description: External ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - '*/*'
      responses:
        "200":
          description: Request successfully proxied and processed
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Make request to a REST function
      tags:
      - Executions
    post:
      consumes:
      - text/plain
      description: Proxies requests to docker instance running executable. Method
        passed to instance forwarded from req. Middleware figures out the instance
        URL to proxy the request to, based on ExternalId. Returns proxied response.
      parameters:
      - description: External ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - '*/*'
      responses:
        "200":
          description: Request successfully proxied and processed
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Make request to a REST function
      tags:
      - Executions
    put:
      consumes:
      - text/plain
      description: Proxies requests to docker instance running executable. Method
        passed to instance forwarded from req. Middleware figures out the instance
        URL to proxy the request to, based on ExternalId. Returns proxied response.
      parameters:
      - description: External ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - '*/*'
      responses:
        "200":
          description: Request successfully proxied and processed
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Make request to a REST function
      tags:
      - Executions
  /function:
    get:
      description: Retrieves a list of all function entities stored in the system.
      produces:
      - application/json
      responses:
        "200":
          description: List of all functions
          schema:
            items:
              $ref: '#/definitions/data.FunctionEntity'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: List all functions
      tags:
      - Functions
    post:
      consumes:
      - multipart/form-data
      description: Uploads a zip file, validates its contents, and processes it in
        storage. The zip file must contain a "bootstrap" executable. Returns ExternalId
      parameters:
      - description: File to upload
        in: formData
        name: zip
        required: true
        type: file
      - description: JSON configuration data
        in: formData
        name: config
        required: true
        type: string
      - description: Display name of the function
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: File uploaded and processed successfully
          schema:
            $ref: '#/definitions/data.FunctionEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Upload and process a file
      tags:
      - Functions
  /function/{id}:
    delete:
      description: Deletes a specific function entity identified by its ID.
      parameters:
      - description: Function ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Function deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Delete a function
      tags:
      - Functions
    put:
      consumes:
      - multipart/form-data
      description: Updates an existing function config by submitting new config data
      parameters:
      - description: Function ID
        in: path
        name: id
        required: true
        type: string
      - description: JSON configuration data
        in: formData
        name: config
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Function updated successfully
          schema:
            $ref: '#/definitions/data.FunctionEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Update an existing function config
      tags:
      - Functions
swagger: "2.0"
