{
    "swagger": "2.0",
    "info": {
        "description": "A WIP serverless framework for running functions similar to AWS Lambda",
        "title": "Jambda - Serverless framework",
        "contact": {
            "name": "jwtly10/Jambda",
            "url": "https://www.github.com/jwtly10/jambda"
        },
        "version": "0.1"
    },
    "host": "localhost:8080",
    "basePath": "/v1/api",
    "paths": {
        "/file/upload": {
            "post": {
                "description": "Uploads a zip file, validates its contents, and processes it in storage. The zip file must contain a \"bootstrap\" executable. Returns ExternalId",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Function Submit"
                ],
                "summary": "Upload and process a file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "File to upload",
                        "name": "upload",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JSON configuration data",
                        "name": "config",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "File uploaded and processed successfully",
                        "schema": {
                            "$ref": "#/definitions/data.FunctionEntity"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/function/{id}/": {
            "get": {
                "description": "Proxies requests to docker instance running executable. Method passed to instance forwarded from req. Middleware figures out the instance URL to proxy the request to, based on ExternalId. Returns proxied response.",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Jambda Function Executions"
                ],
                "summary": "Make request to a REST function",
                "parameters": [
                    {
                        "type": "string",
                        "description": "External ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully proxied and processed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Proxies requests to docker instance running executable. Method passed to instance forwarded from req. Middleware figures out the instance URL to proxy the request to, based on ExternalId. Returns proxied response.",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Jambda Function Executions"
                ],
                "summary": "Make request to a REST function",
                "parameters": [
                    {
                        "type": "string",
                        "description": "External ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully proxied and processed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Proxies requests to docker instance running executable. Method passed to instance forwarded from req. Middleware figures out the instance URL to proxy the request to, based on ExternalId. Returns proxied response.",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Jambda Function Executions"
                ],
                "summary": "Make request to a REST function",
                "parameters": [
                    {
                        "type": "string",
                        "description": "External ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully proxied and processed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Proxies requests to docker instance running executable. Method passed to instance forwarded from req. Middleware figures out the instance URL to proxy the request to, based on ExternalId. Returns proxied response.",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Jambda Function Executions"
                ],
                "summary": "Make request to a REST function",
                "parameters": [
                    {
                        "type": "string",
                        "description": "External ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully proxied and processed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "data.FunctionConfig": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "env_vars": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "trigger": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "data.FunctionEntity": {
            "type": "object",
            "properties": {
                "configuration": {
                    "$ref": "#/definitions/data.FunctionConfig"
                },
                "created_at": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    }
}